#!/usr/bin/env python
#
# calculate_growth_rate calcula la tasa de crecimiento fundamental (lambda)
# utilizando un ajuste de una ley de potencia a los datos de cantidad de nidos
import os

from bootstraping_tools import *
from cli_paths import path_files
from geci_plots import *
from matplotlib.ticker import MaxNLocator
from tqdm import tqdm

import matplotlib.pyplot as plt
import pandas as pd
import pandasql as ps

path=path_files()
data_path = path.input[0][0]
latex_table = path.exit[1][0]
results_table = path.exit[0][0]

datos_parejas_aves_marinas = pd.read_csv(data_path)
lambdas = []

if not os.path.exists("data/processed"):
    os.makedirs("data/processed")

for especie, _ in tqdm(datos_parejas_aves_marinas.groupby(by="Nombre_en_ingles")):
    query_islas = """SELECT DISTINCT Isla FROM datos_parejas_aves_marinas WHERE Nombre_en_ingles = '{}' """.format(
        especie
    )
    ax = plt.figure(figsize=(11, 8)).gca()
    islas = ps.sqldf(query_islas, locals())
    for isla, _ in ps.sqldf(query_islas, locals()).groupby(by="Isla"):
        query_temporadas_y_nidos = """SELECT Temporada, Maxima_cantidad_nidos FROM datos_parejas_aves_marinas WHERE Nombre_en_ingles = '{}' AND Isla = '{}' """.format(
            especie, isla
        )
        cantidad_nidos = ps.sqldf(query_temporadas_y_nidos, locals())
        print(especie,isla)
        try:
            parameters = lambda_calculator(cantidad_nidos["Temporada"], cantidad_nidos["Maxima_cantidad_nidos"])
            lambdas_distribution, intervals = bootstrap_from_time_series(cantidad_nidos, "Maxima_cantidad_nidos", N=2000, return_distribution=True)         
        except RuntimeError:
            pass
        lambdas_distribution = pd.DataFrame({"Tasa de crecimiento": lambdas_distribution})
        lambdas_distribution.to_csv('data/processed/distribucion_de_{}_en_{}.csv'.format(especie.replace(" ", "_"),isla.replace(" ", "_")))
        p_value_mayor, p_value_menor = calculate_p_values(lambdas_distribution)
        model = power_law(
            cantidad_nidos["Temporada"] - cantidad_nidos["Temporada"][0],
            parameters[0],
            parameters[1],
        )
        intervalo = "({}-{})".format(
            cantidad_nidos["Temporada"].min(axis=0), cantidad_nidos["Temporada"].max(axis=0)
        )
        if cantidad_nidos["Maxima_cantidad_nidos"].iloc[0] == 0:
            porcentaje_cambio = 100 * np.abs(model.iloc[-1] - model.iloc[0]) / model.iloc[0]
        else:
            porcentaje_cambio = (
                100
                * np.abs(model.iloc[-1] - cantidad_nidos["Maxima_cantidad_nidos"].iloc[0])
                / cantidad_nidos["Maxima_cantidad_nidos"].iloc[0]
            )
        first_number = "{} ({})".format(
            cantidad_nidos["Maxima_cantidad_nidos"].iloc[0], cantidad_nidos["Temporada"].iloc[0]
        )
        first_number_calculated = "{} ({})".format(
            model.iloc[0], cantidad_nidos["Temporada"].iloc[0]
        )
        last_number = "{} ({})".format(
            cantidad_nidos["Maxima_cantidad_nidos"].iloc[-1],
            cantidad_nidos["Temporada"].iloc[-1],
        )
        last_number_calculated = "{} ({})".format(
            model.iloc[-1],
            cantidad_nidos["Temporada"].iloc[-1],
        )

        inferior_limit, central, superior_limit = get_bootstrap_interval(intervals) 
        
        lambdas.append(
            [
                especie,
                isla,
                intervalo,
                first_number,
                last_number,
                last_number_calculated,
                f"${{{central}}}_{{-{inferior_limit}}}^{{+{superior_limit}}}$",
                central,
                f"-{inferior_limit}",
                f"+{superior_limit}",
                porcentaje_cambio,
                p_value_mayor,
                p_value_menor
            ]
        )
        plt.plot(
            cantidad_nidos["Temporada"],
            cantidad_nidos["Maxima_cantidad_nidos"],
            marker=islet_markers[isla],
            linestyle="-",
            color=islet_colors[isla],
            label=isla,
        )
    if len(islas["Isla"].unique()) > 1:
        plt.legend()
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    plt.yticks(rotation=90, size=12)
    locs_x, labels_x = plt.xticks()
    locs_y, labels_y = plt.yticks()
    plt.xticks(locs_x[1:])
    plt.xlim(locs_x[0],locs_x[-1])
    plt.ylim(0,locs_y[-1])
    plt.xlabel("Seasons", size=15, labelpad=10)
    plt.ylabel("Number of breeding pairs", size=15)
    plt.savefig("reports/figures/{}".format(especie.replace(" ", "_")), dpi=300)

lambdas = pd.DataFrame(lambdas)
lambdas.columns = [
    "Especie",
    "Isla",
    "Intervalo",
    "$N_{0}$",
    "N",
    "N_calc",
    "Tasa de crecimiento",
    "Tasa de crecimiento boostrap",
    "Limite inferior",
    "Limite superior",
    "Porcentaje de cambio",
    "p-valor",
    "p-valor_menor"
]

query_tasas = """SELECT Especie, Isla, N, "Tasa de crecimiento","Porcentaje de cambio" FROM lambdas"""

tasas = ps.sqldf(query_tasas, locals())
tasas.round(decimals=3).to_csv(latex_table, index=False)

lambdas.columns = [
    "Especie",
    "Isla",
    "Intervalo",
    "$N_{0}$",
    "N",
    "N_calc",
    "Tasa_de_crecimiento",
    "Tasa_de_crecimiento_boostrap",
    "Limite_inferior",
    "Limite_superior",
    "Porcentaje_de_cambio",
    "p_valor",
    "p_valor_menor"
]

lambdas.round(decimals=3).to_csv(results_table)


