#!/usr/bin/env python
#
# calculate_cormorant_growth_rate calcula la tasa de crecimiento fundamental (lambda)
# utilizando un model de una ley de potencia a los datos de cantidad de nidos de cormoran orejon en Isla Alcatraz
from cli_paths import path_files
from calculate_lambda import *
from geci_plots import *
from bootstrap_tools import *

import os
import pandas as pd

path = path_files()

data_path = path.input[0][0]
distribution_file = path.exit[0][0]
plot_file = path.exit[1][0]
drop_values = path.drop


plot_data = pd.read_csv(data_path)

season = plot_data["Intervalo"].str.split("-", n=1, expand=True)
plot_data["Temporada"] = season[0].astype("int32")
plot_data = plot_data.rename(columns={"Nidos_activos_por_visita": "Maxima_cantidad_nidos"})

seasons_ticks = plot_data.Intervalo.unique()
time_ticks = np.linspace(1, len(seasons_ticks), len(seasons_ticks))

if len(drop_values) != 0:
    for droping in drop_values:
        plot_data = plot_data[plot_data.Intervalo != droping[0]]

plot_data = plot_data.dropna(subset=["Maxima_cantidad_nidos"])
time_fit = np.array(plot_data.index) + 1


parameters = calculate_lambda(plot_data["Temporada"], plot_data["Maxima_cantidad_nidos"])
lambdas_distribution, intervals = bootstrap_from_time_series(plot_data, "Maxima_cantidad_nidos", N=2000, return_distribution=True)
lambdas_distribution = pd.DataFrame({"Tasa de crecimiento": lambdas_distribution})
lambdas_distribution.to_csv(distribution_file)

model = power_law(time_fit, parameters[0], parameters[1])

print(parameters[0])
print(parameters[1])


fig, ax = GECI_Plot()
plt.plot(
    time_fit, plot_data["Maxima_cantidad_nidos"], "-o", label="Nidos activos de cormorán orejón"
)
plt.plot(time_fit, model, label="Modelo ajustado")
plt.legend()
plt.ylim(0, plot_data["Maxima_cantidad_nidos"].max() * 1.2)
plt.xlim(0, time_fit.max())
plt.ylabel("Number of breeding pairs", size=15)
plt.xlabel("Seasons", size=15)
plt.gcf().subplots_adjust(bottom=0.2)
ax.xaxis.set_major_locator(MaxNLocator(integer=True))

extra_tick_index = len(seasons_ticks) - 1
time_ticks[extra_tick_index] = time_ticks[extra_tick_index] + 0.1

plt.xticks(time_ticks, seasons_ticks, rotation=90, size=12)
plt.yticks(
    np.arange(
        0,
        roundup(np.max(plot_data["Maxima_cantidad_nidos"]) * 1.4,10),
        roundup(np.max(plot_data["Maxima_cantidad_nidos"]) * 0.2,10),
    )
)


if not os.path.exists("reports/figures"):
    os.makedirs("reports/figures")
plt.savefig(plot_file, dpi=300)
