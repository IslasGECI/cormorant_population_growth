#!/usr/bin/env python
#
# calculate_cormorant_growth_rate calcula la tasa de crecimiento fundamental (lambda)
# utilizando un model de una ley de potencia a los datos de cantidad de nidos de cormoran orejon en Isla Alcatraz
from cli_paths import path_files
from geci_plots import *
from bootstraping_tools import *

import os
import pandas as pd

path = path_files()

data_path = path.input[0][0]
latex_table = path.output[0][0]

cormorant_data = pd.read_csv(data_path)
lambdas_results = []

for islet in cormorant_data.Isla.unique():
    plot_data = cormorant_data[cormorant_data.Isla == islet]
    season = plot_data["Intervalo"].str.split("-", n=1, expand=True)
    plot_data["Temporada"] = season[0].astype("int32")
    plot_data = plot_data.rename(columns={"Nidos_activos_por_visita": "Maxima_cantidad_nidos"})
    plot_data = plot_data.reset_index(drop=True)

    ticks_text = plot_data.Intervalo.unique()
    ticks_positions = ticks_positions_array(ticks_text)

    plot_data = plot_data.dropna(subset=["Maxima_cantidad_nidos"])
    min_value = plot_data["Maxima_cantidad_nidos"].min()
    time_fit = np.array(plot_data.index) + 1
    time_to_model = np.linspace(time_fit.min(), time_fit.max(), 100)

    parameters = lambda_calculator(plot_data["Temporada"], plot_data["Maxima_cantidad_nidos"])
    lambdas_distribution, intervals = bootstrap_from_time_series(
        plot_data,
        "Maxima_cantidad_nidos",
        N=2000,
        return_distribution=True,
        remove_outliers=True,
    )
    lambdas_distribution = pd.DataFrame({"Tasa de crecimiento": lambdas_distribution})
    p_value_mayor, p_value_menor = calculate_p_values(lambdas_distribution)

    lambda_latex = generate_latex_interval_string(intervals)

    lambdas_results.append([islet, lambda_latex, p_value_mayor, p_value_menor])

    model_min = power_law(time_to_model, intervals[0], parameters[1])
    model_med = power_law(time_to_model, intervals[1], parameters[1])
    model_max = power_law(time_to_model, intervals[2], parameters[1])

    fig, ax = geci_plot()
    ax.fill_between(
        time_to_model, model_min, model_max, alpha=0.2, label="Confidence zone", color="b"
    )
    plt.plot(time_fit, plot_data["Maxima_cantidad_nidos"], "-Dk", label="Active Nests")
    plt.plot(time_to_model, model_med, label="Population growth model", color="b")
    leg = plt.legend(loc=0)
    plt.ylim(
        plot_data["Maxima_cantidad_nidos"].min(), plot_data["Maxima_cantidad_nidos"].max() * 1.2
    )
    plt.xlim(time_fit.min() - 0.2, time_fit.max())
    plt.ylabel("Number of breeding pairs", size=15)
    plt.xlabel("Seasons", size=15)
    plt.gcf().subplots_adjust(bottom=0.2)
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))

    plt.xticks(ticks_positions, ticks_text, rotation=90, size=20)
    y_ticks_array = rounded_ticks_array(limite_superior, min_value)
    plt.yticks(y_ticks_array)
    plt.draw()

    p = leg.get_window_extent()
    ax.annotate(
        r"$\lambda =$ {}".format(lambda_latex),
        (p.p0[0], p.p1[1] - 320),
        xycoords="figure pixels",
        fontsize=25,
        color="k",
        alpha=1,
    )

    plt.savefig(
        "reports/figures/cormorant_population_trend_{}".format(islet.replace(" ", "_").lower()),
        dpi=300,
    )

lambdas_table = pd.DataFrame(lambdas_results)
lambdas_table.columns = ["Islet", "Growth_rate", "p_value", "p_value_menor"]

if not os.path.exists("reports/tables"):
    os.makedirs("reports/tables")

lambdas_table.round(decimals=3).to_csv(latex_table, index=False)
